// –ü–µ—Ä–µ—Ä–æ–±–∏ —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞ –ø—Ä–æ–º—ñ—Å —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –ø—Ä–æ–º—ñ—Å –ø–æ–≤–µ—Ä—Ç–∞–≤ –∑–Ω–∞—á–µ–Ω–Ω—è
// —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏ –ø—ñ—Å–ª—è –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó

// function greet() {
//   return 'hello world';
// }

// const greetPromise = new Promise(res => {
//   setTimeout(() => res(greet()), 2000);
// });
// greetPromise.then(value => {
//   console.log(value);
// });

//=========================================================================

// - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π prompt —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞–π –∑–Ω–∞—á–µ–Ω–Ω—è –∑–≤—ñ–¥—Ç–∏.
// - –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –±—É–¥–µ –Ω–∞–±—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ prompt —ñ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏–º–µ –ø—Ä–æ–º—ñ—Å.
// –î–æ–¥–∞–π –ø–µ—Ä–µ–≤—ñ—Ä–∫—É:
// –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ —î —á–∏—Å–ª–æ–º, –≤—ñ–¥—Ö–∏–ª—è–π –ø—Ä–æ–º—ñ—Å —Ç–∞ –ª–æ–≥—ñ—Ä—É–π "error".
// –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–Ω–µ, –≤–∏—Ä—ñ—à—É–π –ø—Ä–æ–º—ñ—Å —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞–π "even" —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É.
// –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –ø–∞—Ä–Ω–µ, –≤–∏—Ä—ñ—à—É–π –ø—Ä–æ–º—ñ—Å —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞–π "odd" —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏.

// const value = +prompt('Enter value');
// function checkValue(value) {
//   return new Promise((res, rej) => {
//     if (Number.isNaN(value)) {
//       rej('Error');
//     } else if (value % 2 === 0) {
//       setTimeout(() => res('even'), 1000);
//     } else if (value % 2 !== 0) {
//       setTimeout(() => res('odd'), 2000);
//     }
//   });
// }
// checkValue(value)
//   .then(value => console.log(value))
//   .catch(err => console.log(err));

// –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é randomTask(), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–º—ñ—Å. –ó –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é 50% –≤–æ–Ω–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑ —Ä—è–¥–∫–æ–º "–£—Å–ø—ñ—Ö!", —ñ–Ω–∞–∫—à–µ ‚Äî –≤—ñ–¥—Ö–∏–ª—è—î—Ç—å—Å—è –∑ "–ü–æ–º–∏–ª–∫–∞!".
// * –ü—Ä–æ–º—ñ—Å –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –Ω–µ —Ä—è–¥–æ–∫, –∞ –æ–± º—î–∫—Ç –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ code (–≤—ñ–¥—Å–æ—Ç–æ–∫) —ñ message (—Å–∞–º —Ç–µ–∫—Å—Ç)
// –ü—Ä–∏–∫–ª–∞–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
// ‚úÖ 73% - –£—Å–ø—ñ—Ö!
// ‚ùå 7% - –ü–æ–º–∏–ª–∫–∞!

// function randomTask() {
//     const randomNumber = Math.random() * 100;
//     return new Promise((res, rej) => {
//         if (randomNumber >= 50) {
//             res({ code: randomNumber, message: "–£—Å–ø—ñ—Ö!" })
//         } else {
//             rej({ code: randomNumber, message: "–ü–æ–º–∏–ª–∫–∞!" })
//         }
//     })

// }
// randomTask().then((data) => console.log(`‚úÖ ${data.code.toFixed(0)}% - ${data.message}`)).catch((error) => console.log(`‚ùå ${error.code.toFixed(0)}% - ${error.message}`));

// –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é countdown(seconds), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–º—ñ—Å.
// –ü—Ä–æ–º—ñ—Å –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –ø—Ä–æ–π–¥–µ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å. –§—É–Ω–∫—Ü—ñ—è –º–∞—î –≤–∏–≤–æ–¥–∏—Ç–∏ —É –∫–æ–Ω—Å–æ–ª—å –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.
// countdown(5).then(res => console.log(res));
// 4...
// 3...
// 2...
// 1...
// –ß–∞—Å –≤–∏–π—à–æ–≤!

// function countdown(seconds) {
//     let sec = seconds - 1;
//     const secInt = setInterval(() => {
//         console.log(`${sec}...`);
//         sec -= 1;
//         if (sec < 1) {
//             clearInterval(secInt);
//         }
//  }, 1000);

//     return new Promise((res)=> {
//     setTimeout(() => {
//         res('–ß–∞—Å –≤–∏–π—à–æ–≤!');
//     }, seconds*1000);
// })
// }

// countdown(5).then(res => console.log(res));
// !=====================================
// –£—è–≤—ñ–º–æ, —â–æ —Ç–∏ –≥–æ—Ç—É—î—à —Å–Ω—ñ–¥–∞–Ω–æ–∫. –ü–æ—Ç—Ä—ñ–±–Ω–æ:
// –ü—ñ–¥—Å–º–∞–∂–∏—Ç–∏ —è–π—Ü—è (2 —Å–µ–∫—É–Ω–¥–∏)
// –ó–≤–∞—Ä–∏—Ç–∏ –∫–∞–≤—É (3 —Å–µ–∫—É–Ω–¥–∏)
// –ü—ñ–¥—Å–º–∞–∂–∏—Ç–∏ —Ç–æ—Å—Ç–∏ (1.5 —Å–µ–∫—É–Ω–¥–∏)
// –ö–æ–∂–Ω–∞ –¥—ñ—è ‚Äî —Ü–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–º—ñ—Å. –ó–∞–≤–¥–∞–Ω–Ω—è:
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ Promise.all, –≤–∏–≤–µ–¥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–°–Ω—ñ–¥–∞–Ω–æ–∫ –≥–æ—Ç–æ–≤–∏–π!" –ª–∏—à–µ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä—å–æ—Ö –¥—ñ–π, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ.
// –û–¥–Ω–∞ –∑ –¥—ñ–π (–∑–≤–∞—Ä–∏—Ç–∏ –∫–∞–≤—É) –º–æ–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏—Å—è –ø–æ–º–∏–ª–∫–æ—é, —è–∫—â–æ –∫–∞–≤–∏ –Ω–µ–º–∞—î (–∑–º—ñ–Ω–Ω–∞ hasCoffee = false). –í —Ç–∞–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–æ–º—ñ—Å –º–∞—î
// –≤–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É "‚ùå –°–Ω—ñ–¥–∞–Ω–æ–∫ –Ω–µ –≤–∏–π—à–æ–≤"

function fryEggs() {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve('–Ø—î—á–Ω—è –≥–æ—Ç–æ–≤–∞!');
    }, 2000);
  });
}

function makeCoffee() {
  const hasCoffee = Math.random() > 0.5;
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (hasCoffee) {
        resolve('–ö–∞–≤–∞ –≥–æ—Ç–æ–≤–∞!');
      } else {
        reject(' –ö–∞–≤–∏ –Ω–µ–º–∞—î üòí');
      }
    }, 3000);
  });
}

function fryTostes() {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve('–¢–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤—ñ!');
    }, 1500);
  });
}

Promise.all([fryEggs(), makeCoffee(), fryTostes()])
  .then(data => {
    console.log(data);
    console.log('üòÉ–°–Ω—ñ–¥–∞–Ω–æ–∫ –≥–æ—Ç–æ–≤–∏–π!');
  })
  .catch(error => {
    console.log(error);
    console.log('‚ùå –°–Ω—ñ–¥–∞–Ω–æ–∫ –Ω–µ –≤–∏–π—à–æ–≤');
  });
